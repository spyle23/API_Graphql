# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Comment {
  content: String!
  createdAt: DateTime!
  id: Int!
  image: String
  postId: Int!
  updatedAt: DateTime!
  userId: Int!
}

"""input for the comment"""
input CommentInput {
  content: String!
  image: String
}

"""response type for comment"""
type CommentResponse {
  data: [CommentWithUser!]
  message: String!
  success: Boolean!
}

"""comment with user"""
type CommentWithUser {
  Post: Post!
  User: User!
  content: String!
  createdAt: DateTime!
  id: Int!
  image: String
  postId: Int!
  updatedAt: DateTime!
  userId: Int!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DiscussGroup {
  _count: DiscussGroupCount
  coverPhoto: String
  createdAt: DateTime!
  groupName: String!
  id: Int!
  updatedAt: DateTime!
}

type DiscussGroupCount {
  groupeMessages: Int!
  members: Int!
}

"""user choose"""
input DiscussGroupInput {
  coverPhoto: String
  groupName: String!
}

"""Login response with token"""
type LoginResponseForm {
  data: UserWithToken
  message: String!
  success: Boolean!
}

type Message {
  content: String!
  createdAt: DateTime!
  discussGroupId: Int
  id: Int!
  receiverId: Int
  updatedAt: DateTime!
  userId: Int!
}

"""messgae inputs"""
input MessageInput {
  content: String!
}

"""message response type"""
type MessageResponse {
  data: [Message!]
  message: String!
  success: Boolean!
}

type Mutation {
  createComment(commentInput: CommentInput!, postId: Float!, userId: Float!): String!
  createDiscussGroup(data: DiscussGroupInput!, userChoose: UserChoose!): DiscussGroup!
  createPost(data: PostInput!, userId: Float!): String!
  deleteComment(commentId: Float!, userId: Float!): String!
  deleteFile(url: String!): String!
  deleteMessageById(messageId: Float!, userId: Float!): String!
  login(email: String!, password: String!): LoginResponseForm!
  modifyComment(commendId: Float!, commentInput: CommentInput!, userId: Float!): String!
  modifyMessage(messageId: Float!, newMessage: String!, userId: Float!): String!
  sendMessageDiscoussGroup(discussGroupId: Float, messageInput: MessageInput!, receiverId: Float, userId: Float!): MessageResponse!
  signup(userInput: SignupInput!): LoginResponseForm!
  upload(data: UploadInput!): String!
}

type Notification {
  createdAt: DateTime!
  description: String!
  id: Int!
  name: String!
  updatedAt: DateTime!
  userId: Int
}

type Post {
  _count: PostCount
  createdAt: DateTime!
  description: String!
  id: Int!
  image: String
  updatedAt: DateTime!
  userId: Int!
}

type PostCount {
  comments: Int!
}

"""Form of post to display"""
type PostDisplay {
  _count: PostCount
  comments: [Comment!]
  createdAt: DateTime!
  description: String!
  id: Int!
  image: String
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

"""inputs for post"""
input PostInput {
  description: String!
  image: String
}

type Query {
  getAllGroupUser(userId: Float!): [DiscussGroup!]!
  getCommentByPost(postId: Float!): CommentResponse!
  getCommentByUser(userId: Float!): CommentResponse!
  getOrderPost: [PostDisplay!]!
  messageTwoUser(discussGroupId: Float, receiverId: Float, userId: Float!): MessageResponse!
  postByUser(userId: Float!): [Post!]!
  profile(userId: Float!): UserDetails
}

"""user inputs"""
input SignupInput {
  civilite: String
  email: String!
  firstname: String
  lastname: String
  password: String!
}

type Subscription {
  commentPost(userId: Float!): Notification!
  messageToUser(userId: Float!): Message!
}

"""input for the file"""
input UploadInput {
  data: String!
  name: String!
  type: String!
}

type User {
  _count: UserCount
  civilite: String
  createdAt: DateTime!
  email: String!
  firstname: String
  id: Int!
  lastname: String
  password: String!
  photo: String
  updatedAt: DateTime!
}

"""user id in the group discuss"""
input UserChoose {
  membresId: [Float!]!
}

type UserCount {
  Post: Int!
  comments: Int!
  groupes: Int!
  messages: Int!
  notifications: Int!
}

"""details of user"""
type UserDetails {
  Post: [Post!]!
  _count: UserCount
  civilite: String
  createdAt: DateTime!
  email: String!
  firstname: String
  id: Int!
  lastname: String
  notifications: [Notification!]!
  password: String!
  photo: String
  updatedAt: DateTime!
}

"""User with token"""
type UserWithToken {
  _count: UserCount
  civilite: String
  createdAt: DateTime!
  email: String!
  firstname: String
  id: Int!
  lastname: String
  password: String!
  photo: String
  token: String!
  updatedAt: DateTime!
}
