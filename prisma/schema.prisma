generator client {
    provider = "prisma-client-js"
}

generator typegraphql {
    provider = "typegraphql-prisma"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum ReactionType {
    LIKE
    LOVE
    WOAHOU
    SAD
    HAHA
    GRR
}

model User {
    id                  Int                  @id @default(autoincrement())
    email               String               @unique
    firstname           String?
    lastname            String?
    password            String
    photo               String?              @db.Text
    civilite            String?
    friends             User[]               @relation(name: "friends")
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    Post                Post[]
    comments            Comment[]
    messages            Message[]            @relation(name: "sender")
    receiverMessage     Message[]            @relation(name: "receiver")
    discussions         Discussion[]         @relation(name: "discussion-send")
    receiverDiscussions Discussion[]         @relation(name: "discussion-received")
    groupes             UserOnDiscussGroup[]
    reactions           Reaction[]
    notifications       Notification[]
    User                User?                @relation(fields: [userId], references: [id], name: "friends")
    userId              Int?
}

model Discussion {
    id           Int           @id @default(autoincrement())
    theme        String        @default("#512da8")
    DiscussGroup DiscussGroup?
    messages     Message[]
    User         User          @relation(fields: [userId], references: [id], name: "discussion-send")
    userId       Int
    Receiver     User?         @relation(fields: [receiverId], references: [id], name: "discussion-received")
    receiverId   Int?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model FileExt {
    id        Int      @id @default(autoincrement())
    name      String
    extension String
    url       String
    Post      Post?    @relation(fields: [postId], references: [id])
    postId    Int?
    Comment   Comment? @relation(fields: [commentId], references: [id])
    commentId Int?
    Message   Message? @relation(fields: [messageId], references: [id])
    messageId Int?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Post {
    id          Int        @id @default(autoincrement())
    userId      Int
    user        User       @relation(fields: [userId], references: [id])
    description String
    files       FileExt[]
    reactions   Reaction[]
    comments    Comment[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model Reaction {
    id           Int          @id @default(autoincrement())
    reactionType ReactionType
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    Post         Post         @relation(fields: [postId], references: [id])
    postId       Int
    User         User         @relation(fields: [userId], references: [id])
    userId       Int
}

model Comment {
    id        Int       @id @default(autoincrement())
    Post      Post      @relation(fields: [postId], references: [id])
    postId    Int
    User      User      @relation(fields: [userId], references: [id])
    files     FileExt[]
    content   String
    userId    Int
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Message {
    id             Int           @id @default(autoincrement())
    User           User          @relation(name: "sender", fields: [userId], references: [id])
    userId         Int
    Receiver       User?         @relation(name: "receiver", fields: [receiverId], references: [id])
    receiverId     Int?
    content        String
    files          FileExt[]
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    DiscussGroup   DiscussGroup? @relation(fields: [discussGroupId], references: [id])
    discussGroupId Int?
    Discussion     Discussion    @relation(fields: [discussionId], references: [id])
    discussionId   Int
}

model DiscussGroup {
    id             Int                  @id @default(autoincrement())
    groupName      String
    coverPhoto     String?              @db.Text()
    members        UserOnDiscussGroup[]
    groupeMessages Message[]
    createdAt      DateTime             @default(now())
    updatedAt      DateTime             @updatedAt
    Discussion     Discussion           @relation(fields: [discussionId], references: [id])
    discussionId   Int                  @unique
}

model UserOnDiscussGroup {
    User           User         @relation(fields: [userId], references: [id])
    userId         Int
    DiscussGroup   DiscussGroup @relation(fields: [discussGroupId], references: [id])
    discussGroupId Int
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@id([userId, discussGroupId])
}

model Notification {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    User        User?    @relation(fields: [userId], references: [id])
    userId      Int?
}
