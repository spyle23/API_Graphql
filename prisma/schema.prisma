generator client {
    provider = "prisma-client-js"
}

generator typegraphql {
    provider = "typegraphql-prisma"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum ReactionType {
    LIKE
    LOVE
    WOAHOU
    HAHA
    GRR
}

model User {
    id            Int                  @id @default(autoincrement())
    email         String               @unique
    firstname     String?
    lastname      String?
    password      String
    photo         String?              @db.Text
    civilite      String?
    createdAt     DateTime             @default(now())
    updatedAt     DateTime             @updatedAt
    Post          Post[]
    comments      Comment[]
    messages      Message[]
    groupes       UserOnDiscussGroup[]
    reactions     Reaction[]
    notifications Notification[]
}

model Post {
    id          Int        @id @default(autoincrement())
    userId      Int
    user        User       @relation(fields: [userId], references: [id])
    description String
    image       String?    @db.Text
    reactions   Reaction[]
    comments    Comment[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model Reaction {
    id           Int          @id @default(autoincrement())
    reactionType ReactionType
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    Post         Post         @relation(fields: [postId], references: [id])
    postId       Int
    User         User        @relation(fields: [userId], references: [id])
    userId       Int
}

model Comment {
    id        Int      @id @default(autoincrement())
    Post      Post     @relation(fields: [postId], references: [id])
    postId    Int
    User      User     @relation(fields: [userId], references: [id])
    image     String?  @db.Text
    content   String
    userId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Message {
    id             Int           @id @default(autoincrement())
    User           User          @relation(fields: [userId], references: [id])
    userId         Int
    receiverId     Int?
    content        String
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    DiscussGroup   DiscussGroup? @relation(fields: [discussGroupId], references: [id])
    discussGroupId Int?
}

model DiscussGroup {
    id             Int                  @id @default(autoincrement())
    groupName      String
    coverPhoto     String?              @db.Text()
    members        UserOnDiscussGroup[]
    groupeMessages Message[]
    createdAt      DateTime             @default(now())
    updatedAt      DateTime             @updatedAt
}

model UserOnDiscussGroup {
    User           User         @relation(fields: [userId], references: [id])
    userId         Int
    DiscussGroup   DiscussGroup @relation(fields: [discussGroupId], references: [id])
    discussGroupId Int
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@id([userId, discussGroupId])
}

model Notification {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    User        User?    @relation(fields: [userId], references: [id])
    userId      Int?
}
