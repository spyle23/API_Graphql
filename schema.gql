# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""payload for call video stream"""
type CallTypeObject {
  receiverId: Float!
  signal: String!
  userId: Float!
}

type CommentCount {
  files: Int!
}

"""input for the comment"""
input CommentInput {
  content: String!
  files: [FileInput!]!
}

"""response type for comment"""
type CommentResponse {
  data: [CommentWithUser!]
  message: String!
  success: Boolean!
}

"""comment with user"""
type CommentWithUser {
  Post: Post!
  User: User!
  _count: CommentCount
  content: String!
  createdAt: DateTime!
  files: [FileExt!]!
  id: Int!
  postId: Int!
  updatedAt: DateTime!
  userId: Int!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DiscussGroup {
  _count: DiscussGroupCount
  coverPhoto: String
  createdAt: DateTime!
  discussionId: Int!
  groupName: String!
  id: Int!
  updatedAt: DateTime!
}

type DiscussGroupCount {
  groupeMessages: Int!
  members: Int!
}

"""discuss group with discussion"""
type DiscussGroupDiscussion {
  Discussion: Discussion!
  _count: DiscussGroupCount
  coverPhoto: String
  createdAt: DateTime!
  discussionId: Int!
  groupName: String!
  id: Int!
  updatedAt: DateTime!
}

"""user choose"""
input DiscussGroupInput {
  coverPhoto: String
  groupName: String!
}

type Discussion {
  _count: DiscussionCount
  createdAt: DateTime!
  id: Int!
  receiverId: Int
  theme: String!
  updatedAt: DateTime!
  userId: Int!
}

type DiscussionCount {
  messages: Int!
}

"""Object that extends the discussion base models"""
type DiscussionExtend {
  DiscussGroup: GroupWithMembers
  Receiver: User
  User: User!
  _count: DiscussionCount
  createdAt: DateTime!
  id: Int!
  messages: [MessageWithRecepter!]!
  receiverId: Int
  theme: String!
  updatedAt: DateTime!
  userId: Int!
}

"""input for changing theme discussion"""
input DiscussionInput {
  id: Float!
  receiverId: Float
  theme: String!
  userId: Float!
}

type FileExt {
  commentId: Int
  createdAt: DateTime!
  extension: String!
  id: Int!
  messageId: Int
  name: String!
  postId: Int
  updatedAt: DateTime!
  url: String!
}

"""input for file"""
input FileInput {
  extension: String!
  name: String!
  url: String!
}

"""friend request return type with sender"""
type FriendRequestExtend {
  User: User!
  createdAt: DateTime!
  id: Int!
  receiverId: Int!
  status: RequestStatus!
  updatedAt: DateTime!
  userId: Int!
}

"""group with members"""
type GroupWithMembers {
  _count: DiscussGroupCount
  coverPhoto: String
  createdAt: DateTime!
  discussionId: Int!
  groupName: String!
  id: Int!
  members: [UserOnDiscussGroup!]!
  updatedAt: DateTime!
}

"""Login response with token"""
type LoginResponseForm {
  data: UserWithToken
  message: String!
  success: Boolean!
}

type Message {
  _count: MessageCount
  content: String!
  createdAt: DateTime!
  discussGroupId: Int
  discussionId: Int!
  id: Int!
  receiverId: Int
  updatedAt: DateTime!
  userId: Int!
}

type MessageCount {
  files: Int!
}

"""message inputs"""
input MessageInput {
  content: String!
  files: [FileInput!]!
}

"""message response type"""
type MessageResponse {
  data: [Message!]
  message: String!
  success: Boolean!
}

"""message type with receiver and groupe"""
type MessageWithRecepter {
  DiscussGroup: GroupWithMembers
  Receiver: User
  User: User!
  _count: MessageCount
  content: String!
  createdAt: DateTime!
  discussGroupId: Int
  discussionId: Int!
  files: [FileExt!]!
  id: Int!
  receiverId: Int
  updatedAt: DateTime!
  userId: Int!
}

"""return type of writting subcription"""
type MessageWrittingObject {
  discussionId: Float!
  isWritting: Boolean!
  user: User!
}

type Mutation {
  addReaction(postId: Float!, reactionType: ReactionInput!, userId: Float!): String!
  callUser(receiverId: Float!, signal: String!, userId: Float!): String!
  changeTheme(data: DiscussionInput!): Discussion!
  createComment(commentInput: CommentInput!, postId: Float!, userId: Float!): String!
  createDiscussGroup(data: DiscussGroupInput!, userChoose: UserChoose!, userId: Float!): DiscussGroupDiscussion!
  createDiscussion(receiverId: Float!, userId: Float!): Discussion!
  createPost(data: PostInput!, userId: Float!): String!
  deleteComment(commentId: Float!, userId: Float!): String!
  deleteFile(url: String!): String!
  deleteFriend(receiverId: Float!, userId: Float!): String!
  deleteMessageById(messageId: Float!, userId: Float!): String!
  handleCallMutation(receiverId: Float!, signal: String!, status: Boolean!, userId: Float!): String!
  handleFriendRequest(friendRequestId: Float!, status: String!): String!
  login(email: String!, password: String!): LoginResponseForm!
  logout(userId: Float!): String!
  modifyComment(commendId: Float!, commentInput: CommentInput!, userId: Float!): String!
  modifyMessage(messageId: Float!, newMessage: String!, userId: Float!): String!
  sendFriendRequest(receiverId: Float!, userId: Float!): String!
  sendMessageDiscoussGroup(discussGroupId: Float, discussionId: Float!, messageInput: MessageInput!, receiverId: Float, userId: Float!): DiscussionExtend!
  signup(userInput: SignupInput!): LoginResponseForm!
  updateUser(updateUserInput: UpdateUserInput!, userId: Float!): String!
  upload(data: [Upload!]!): [FileExt!]!
  writtingCheck(discussionId: Float!, isWritting: Boolean!, userId: Float!): MessageResponse!
}

type Notification {
  createdAt: DateTime!
  description: String!
  id: Int!
  name: String!
  updatedAt: DateTime!
  userId: Int
}

type Post {
  _count: PostCount
  createdAt: DateTime!
  description: String!
  id: Int!
  updatedAt: DateTime!
  userId: Int!
}

type PostCount {
  comments: Int!
  files: Int!
  reactions: Int!
}

"""Form of post to display"""
type PostDisplay {
  _count: PostCount
  createdAt: DateTime!
  description: String!
  files: [FileExt!]!
  id: Int!
  nbComments: Float!
  reactions: [Reaction!]
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

"""inputs for post"""
input PostInput {
  description: String!
  files: [FileInput!]!
}

type Query {
  allUser: [User!]!
  getAllGroupUser(userId: Float!): [DiscussGroup!]!
  getCommentByPost(cursor: Float, limit: Float = 10, postId: Float!): CommentResponse!
  getCommentByUser(userId: Float!): CommentResponse!
  getCommonFriends(cursor: Float, limit: Float = 10, receiverId: Float!, userId: Float!): [User!]!
  getDiscussionCurrentUser(cursor: Float, limit: Float = 10, userId: Float!): [DiscussionExtend!]!
  getFriendOfCurrentUser(cursor: Float, limit: Float = 10, userId: Float!): [User!]!
  getNotifications(cursor: Float, limit: Float = 10, userId: Float!): [Notification!]!
  getOrderPost(cursor: Float, limit: Float = 10): [PostDisplay!]!
  getRequest(cursor: Float, limit: Float = 10, userId: Float!): [FriendRequestExtend!]!
  getSuggestionOfCurrentUser(cursor: Float, limit: Float = 10, userId: Float!): [User!]!
  messageTwoUser(cursor: Float, discussionId: Float!, limit: Float = 10): [MessageWithRecepter!]!
  postByUser(userId: Float!): [PostDisplay!]!
  profile(userId: Float!): UserDetails
}

type Reaction {
  createdAt: DateTime!
  id: Int!
  postId: Int!
  reactionType: ReactionType!
  updatedAt: DateTime!
  userId: Int!
}

"""input of the reaction"""
input ReactionInput {
  reactionType: ReactionType!
}

enum ReactionType {
  GRR
  HAHA
  LIKE
  LOVE
  SAD
  WOAHOU
}

enum RequestStatus {
  ACCEPTED
  DENIED
  PENDING
}

"""payload for handle video call """
type ResponseCallType {
  receiverId: Float!
  signal: String!
  status: Boolean!
  userId: Float!
}

"""user inputs"""
input SignupInput {
  civilite: String
  email: String!
  firstname: String
  lastname: String
  password: String!
}

type Subscription {
  commentPost(userId: Float!): Notification!
  getStatusUser(userId: Float!): UserWithStatus!
  handleCall(userId: Float!): ResponseCallType!
  listenCall(userId: Float!): CallTypeObject!
  listenTheme(userId: Float!): DiscussionExtend!
  messageToUser(userId: Float!): DiscussionExtend!
  sendRequestNotif(userId: Float!): FriendRequestExtend!
  writeMessage(userId: Float!): MessageWrittingObject!
}

"""input for update user"""
input UpdateUserInput {
  civilite: String
  email: String
  firstname: String
  lastname: String
  photo: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _count: UserCount
  civilite: String
  createdAt: DateTime!
  email: String!
  firstname: String
  id: Int!
  lastname: String
  password: String!
  photo: String
  updatedAt: DateTime!
}

"""user id in the group discuss"""
input UserChoose {
  membresId: [Float!]!
}

type UserCount {
  Post: Int!
  comments: Int!
  discussions: Int!
  friendRequest: Int!
  groupes: Int!
  messages: Int!
  notifications: Int!
  reactions: Int!
  receiverDiscussions: Int!
  receiverMessage: Int!
  request: Int!
}

"""details of user"""
type UserDetails {
  Post: [Post!]!
  _count: UserCount
  civilite: String
  createdAt: DateTime!
  email: String!
  firstname: String
  id: Int!
  lastname: String
  notifications: [Notification!]!
  password: String!
  photo: String
  updatedAt: DateTime!
}

type UserOnDiscussGroup {
  createdAt: DateTime!
  discussGroupId: Int!
  updatedAt: DateTime!
  userId: Int!
}

"""Return type of user for status online"""
type UserWithStatus {
  _count: UserCount
  civilite: String
  createdAt: DateTime!
  email: String!
  firstname: String
  id: Int!
  lastname: String
  password: String!
  photo: String
  status: Boolean!
  updatedAt: DateTime!
}

"""User with token"""
type UserWithToken {
  _count: UserCount
  civilite: String
  createdAt: DateTime!
  email: String!
  firstname: String
  id: Int!
  lastname: String
  password: String!
  photo: String
  token: String!
  updatedAt: DateTime!
}
